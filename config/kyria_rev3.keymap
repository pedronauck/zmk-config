/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&led_strip {
    chain-length = <6>;

    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

&lt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        reload_vim {
            bindings = <&kp LS(LA(R))>;
            key-positions = <4 5>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <34 35>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <35 36>;
        };

        dquote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <22 23>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <10 11>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
        };

        layer4 {
            bindings = <&mo 4>;
            key-positions = <42 43>;
        };
    };

    macros {
        leader_sg: vim_lgg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp S &kp G>;
            label = "VIM_LGG";
        };

        shift_vc: vim_lcs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(V) &kp C>;
            label = "VIM_LCS";
        };

        leader_uh: vim_tu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp U &kp H>;
            label = "VIM_TU";
        };

        leader_cp: vim_lcp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp C &kp P>;
            label = "VIM_LCP";
        };

        leader_fg: vim_lfb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp F &kp G>;
            label = "VIM_LFB";
        };

        leader_cr: vim_lcr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp C &kp R>;
            label = "VIM_LCR";
        };

        leader_ca: vim_lca {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp C &kp A>;
            label = "VIM_LCA";
        };

        leader_bd: leader_bd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp B &kp D>;
            label = "LEADER_BD";
        };

        leader_bP: leader_bP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp B &kp LS(P)>;
            label = "LEADER_BP";
        };

        leader_gg: leader_gg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp G &kp G>;
            label = "LEADER_GG";
        };

        leader_wq: leader_wq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp W &kp Q>;
            label = "LEADER_WQ";
        };
    };

    behaviors {
        ntree: number_tree_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_3>, <&kp PERIOD>;

            mods = <(MOD_LSFT)>;
        };

        ntwo: number_two_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp COMMA>;

            mods = <(MOD_LSFT)>;
        };

        vim_fzf: vim_fzf {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_FZF";
            bindings = <&leader_fg>, <&leader_sg>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        vim_cbuff: vim_cbuff {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_CBUFF";
            bindings = <&leader_bd>, <&leader_bP>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        lt_fast: lt_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_FAST";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   DEL  |
            // |  LCTRL  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | ESC | LAYER 1 |  | LAYER 1 | ESC |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | CTRL  | ALT  | CMD  |  SPACE  |   BSPC   |  |   RET   |  SPACE  | RET  | BSPC  | R-ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E  &kp R  &kp T                                           &kp Y  &kp U  &kp I      &kp O       &kp P          &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D  &kp F  &lt 2 G                                         &kp H  &kp J  &kp K      &kp L       &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_ALT      &kp Z  &kp X  &kp C  &kp V  &kp B     &none      &none  &none  &none        &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp SLASH      &kp RIGHT_SHIFT
                                &none  &mo 1  &kp LGUI  &kp SPACE  &none  &none  &lt 3 ENTER  &mo 1  &mo 2  &none
            >;
        };

        symbol_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&kp GRAVE  &kp EXCLAMATION    &kp AT_SIGN       &kp HASH           &kp DOLLAR      &kp PERCENT                                                      &kp CARET       &kp AMPERSAND   &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp LCTRL  &kp LS(LC(LG(A)))  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE                                                  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW       &kp COLON              &kp DOUBLE_QUOTES
&kp LSHFT  &none              &none             &none              &none           &kp ESCAPE        &none           &none  &none  &none            &kp MINUS       &kp EQUAL       &kp LESS_THAN  &kp GREATER_THAN      &kp QUESTION           &kp RIGHT_SHIFT
                                                &none              &kp LALT        &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none  &none  &kp RIGHT_SHIFT  &kp BACKSPACE   &none           &none
            >;

            sensor-bindings =
                <&inc_dec_kp UP_ARROW DOWN_ARROW>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        number_layer {
            bindings = <
&none             &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3              &kp NUMBER_4               &kp N5                                          &kp NUMBER_6          &kp N7        &kp N8              &kp N9               &kp N0         &kp K_LOCK
&kp LEFT_CONTROL  &none         &none         &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &none                                           &kp LS(LG(NUMBER_3))  &kp NUMBER_4  &kp N5              &kp NUMBER_6         &kp PAGE_DOWN  &kp PAGE_UP
&kp LEFT_SHIFT    &none         &none         &kp LG(LEFT_BRACKET)      &kp LG(RIGHT_BRACKET)      &kp ESCAPE  &none          &none  &none  &none  &kp LS(LG(NUMBER_2))  &kp NUMBER_1  &mt COMMA NUMBER_2  &mt PERIOD NUMBER_3  &none          &none
                                              &none                     &kp LALT                   &kp LGUI    &kp BACKSPACE  &none  &none  &none  &kp N0                &kp N0        &none
            >;
        };

        vim_layer {
            bindings = <
&none      &leader_wq  &vim_cbuff  &none  &leader_cr  &none                                            &none              &leader_uh         &none              &none              &leader_cp  &none
&kp LCTRL  &leader_ca  &none       &none  &vim_fzf    &leader_gg                                       &kp LC(LS(LA(H)))  &kp LC(LS(LA(J)))  &kp LC(LS(LA(K)))  &kp LC(LS(LA(L)))  &none       &none
&kp LSHFT  &none       &none       &none  &none       &kp ESCAPE  &none           &none  &none  &none  &kp LC(LA(LG(H)))  &kp LC(LS(LA(M)))  &kp LC(LA(LG(J)))  &none              &none       &none
                                   &none  &none       &none       &kp LEFT_SHIFT  &none  &none  &none  &none              &none              &none
            >;
        };

        media {
            bindings = <
&trans     &trans  &trans  &trans  &trans    &trans                                          &trans      &trans             &trans           &trans      &kp C_PLAY_PAUSE      &kp DELETE
&kp LCTRL  &trans  &trans  &trans  &trans    &trans                                          &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&kp LSHFT  &trans  &trans  &trans  &trans    &trans    &trans     &trans  &trans  &trans     &trans      &none              &none            &none       &trans                &trans
                           &trans  &kp LALT  &kp LGUI  &kp SPACE  &trans  &trans  &kp ENTER  &trans      &trans             &trans
            >;
        };
    };
};
