/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&led_strip {
    chain-length = <6>;

    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

/ {
    combos {
        compatible = "zmk,combos";

        l2-combo-left {
            bindings = <&mo 2>;
            key-positions = <28 29>;
            layers = <0 2>;
        };

        l2-combo-right {
            bindings = <&mo 2>;
            key-positions = <34 35>;
            layers = <0 1>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    macros {
        vim_lgg: vim_lgg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp G &kp G>;
            label = "VIM_LGG";
        };

        vim_lrw: vim_lrw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp R &kp W>;
            label = "VIM_LRW";
        };

        vim_lcs: vim_lcs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp C &kp S>;
            label = "VIM_LCS";
        };

        vim_tu: vim_tu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp T &kp U>;
            label = "VIM_TU";
        };

        vim_ti: vim_ti {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp T &kp I>;
            label = "VIM_TI";
        };

        vim_lcp: vim_lcp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp C &kp P>;
            label = "VIM_LCP";
        };

        vim_lbd: vim_lbd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp B &kp D>;
            label = "VIM_LBD";
        };

        vim_lbP: vim_lbP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp B &kp LS(P)>;
            label = "VIM_LBP";
        };

        vim_ty: vim_luh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp T &kp Y>;
            label = "VIM_LUH";
        };

        vim_lfb: vim_lfb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp F &kp B>;
            label = "VIM_LFB";
        };

        vim_lcr: vim_lcr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp C &kp R>;
            label = "VIM_LCR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   DEL  |
            // |  LCTRL  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | ESC | LAYER 1 |  | LAYER 1 | ESC |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | CTRL  | ALT  | CMD  |  SPACE  |   BSPC   |  |   RET   |  SPACE  | RET  | BSPC  | R-ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E  &kp R     &kp T                                                  &kp Y  &kp U  &kp I      &kp O       &kp P          &kp LA(BACKSPACE)
&kp LEFT_CONTROL  &kp A  &kp S  &kp D  &kp F     &kp G                                                  &kp H  &kp J  &kp K      &kp L       &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C  &kp V     &kp B     &mo 1      &mo 4     &kp DELETE  &none       &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp SLASH      &kp RIGHT_SHIFT
                                &mo 2  &kp LALT  &kp LGUI  &kp SPACE  &kp BSPC  &mo 3       &kp RETURN  &mo 1  &mo 2  &none
            >;

            sensor-bindings =
                <&inc_dec_kp K_SCROLL_DOWN K_SCROLL_UP>,
                <&inc_dec_kp K_SCROLL_DOWN K_SCROLL_UP>;
        };

        symbol_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR      &kp PERCENT                                                 &kp CARET       &kp AMPERSAND   &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp LCTRL  &none            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE                                             &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW       &kp COLON              &kp DOUBLE_QUOTES
&kp LSHFT  &none            &none             &none              &none           &kp ESCAPE        &none           &none  &none  &none       &kp MINUS       &kp EQUAL       &kp LESS_THAN  &kp GREATER_THAN      &kp QUESTION           &kp RIGHT_SHIFT
                                              &none              &kp LALT        &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none  &none  &kp RETURN  &none           &none           &none
            >;

            sensor-bindings =
                <&inc_dec_kp UP_ARROW DOWN_ARROW>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        number_layer {
            bindings = <
&none             &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3              &kp NUMBER_4               &kp N5                                                                    &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0  &kp K_LOCK
&kp LEFT_CONTROL  &none         &none         &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &none                                                                     &none         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none   &none
&kp LEFT_SHIFT    &none         &none         &kp LG(LEFT_BRACKET)      &kp LG(RIGHT_BRACKET)      &kp ESCAPE  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_2))  &none  &none      &none         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none   &none
                                              &none                     &kp LALT                   &kp LGUI    &kp LEFT_SHIFT        &none                 &none  &kp ENTER  &none         &none         &none
            >;
        };

        vim_layer {
            bindings = <
&none  &vim_lbP   &vim_lbd  &vim_lrw  &vim_lcr  &none                                   &vim_ty            &vim_tu            &vim_ti            &none              &vim_lcp  &none
&none  &kp LS(S)  &vim_lcs  &none     &vim_lfb  &vim_lgg                                &kp LS(LA(LC(H)))  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))  &kp LS(LC(LA(L)))  &none     &none
&none  &none      &none     &none     &none     &kp ESCAPE  &none  &none  &none  &none  &kp LS(LA(LC(N)))  &kp LS(LA(LC(M)))  &none              &none              &none     &none
                            &none     &none     &none       &none  &none  &none  &none  &none              &none              &none
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans      &trans             &trans           &trans      &kp C_PLAY_PAUSE      &kp DELETE
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &kp K_MUTE         &trans           &trans      &trans                &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans             &trans
            >;
        };
    };
};
